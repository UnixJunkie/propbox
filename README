                      propbox 0.5

Summary
=======

Propbox is a Python package for computing molecular properties and
models, and handing the dependencies between the calculations.

The dependencies form a workflow. For example, the steps in building a
consensus model may look like this:

  - the input is a SMILES string
  - turn the SMILES into a molecule
  - desalt it and standardize the charge model
  - use the clean molecule to compute logP,
      molecular weight, and a few other desciptors
  - use the descriptors to compute model-1,
      model-2, and model-3
  - use model-1, model-2, and model-3 to compute
      a consensus model

Rather than arrange the steps by hand, propbox uses a set of resolvers
to fill out a table of properties. The table starts with the input
data - one row per record. You ask the table for the output columns
you want. If a property isn't available, the table asks the resolver
to fill in the missing column. That operation may require additional
data, in which case the resolver goes back to the table to ask for
those columns. This process continues recursively until it gets to
available data. (Or if there's a cycle, until Python's reaches its
maximum recursion depth and throws an exception.) Each resolver then
resolves the column data and the process unwinds until all of the
needed columns are filled in.


Installation
============

This package does not yet support the standard Python installer. You
can run it from the current directory, or copy/move/link the 'propbox'
subdirectory to your location of choice.

License
=======

The propbox package is distributed under the MIT license. (See
COPYING.) The package includes a distribution of the third-party
pylru.py, which is copyright Jay Hutchinson and distributed under the
GPLv2 or later. (See COPYING.pylru.)



'rdprops' command-line tool
===========================

The 'rdprops' command-line program computes molecular descriptors
using the RDKit cheminformatics toolkit from rdkit.org . It implements
the descriptors from rdkit.Chem.Descriptors as well as a few versions
of SMILES strings.

By default it reads a SMILES file from stdin and writes the results to
stdout. I'll ask it to read from a named SMILES file instead, and only
show the first few lines of output::

  % ./rdprops tests/benzodiazepine.smi | head
  id	smiles	MolWt
  1688	CN1C(=O)CN=C(c2ccc(Cl)cc2)c2cc(Cl)ccc21	319.191
  1963	OCc1nnc2n1-c1ccc(Cl)cc1C(c1ccccc1Cl)=NC2	359.216
  2118	Cc1nnc2n1-c1ccc(Cl)cc1C(c1ccccc1)=NC2	308.772
  2802	O=C1CN=C(c2ccccc2Cl)c2cc([N+](=O)[O-])ccc2N1	315.716
  2809	O=C(O)C1N=C(c2ccccc2)c2cc(Cl)ccc2NC1=O	314.728
  2997	O=C1CN=C(c2ccccc2)c2cc(Cl)ccc2N1	270.719
  3016	CN1C(=O)CN=C(c2ccccc2)c2cc(Cl)ccc21	284.746
  3261	Clc1ccc2c(c1)C(c1ccccc1)=NCc1nncn1-2	294.745
  3299	CCOC(=O)C1N=C(c2ccccc2F)c2cc(Cl)ccc2NC1=O	360.772


The default output contains the record identifier ("id"), the
canonical isomeric SMILES ("smiles"), and the molecular weight
("MolWt"). Use the `--columns` option to specify different columns::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,HeavyAtomCount,MolWt' | head
  id	HeavyAtomCount	MolWt
  1688	21	319.191
  1963	24	359.216
  2118	22	308.772
  2802	22	315.716
  2809	22	314.728
  2997	19	270.719
  3016	20	284.746
  3261	21	294.745
  3299	25	360.772

Propbox uses the RDKit descriptor names for the columns, and by
default uses the names for the column headers. You might prefer
a different header::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,HeavyAtomCount,MolWt' --headers 'ID,HEAVIES,MW' | head
  ID	HEAVIES	MW
  1688	21	319.191
  1963	24	359.216
  2118	22	308.772
  2802	22	315.716
  2809	22	314.728
  2997	19	270.719
  3016	20	284.746
  3261	21	294.745
  3299	25	360.772

or perhaps don't want a header at all::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,HeavyAtomCount,MolWt' --no-header | head
  1688	21	319.191
  1963	24	359.216
  2118	22	308.772
  2802	22	315.716
  2809	22	314.728
  2997	19	270.719
  3016	20	284.746
  3261	21	294.745
  3299	25	360.772
  3369	21	302.736

The default output is tab-separated, but you can change that with the
`--dialect` option, which can be one of 'tab', 'space', 'whitespace',
'excel' or 'excel-tab'. (The 'whitespace' option is the same as
'space', and the Excel dialects are as defined by Python's csv
module, and include the special rules for quoting)::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,HeavyAtomCount,MolWt' --dialect excel | head
  id,HeavyAtomCount,MolWt
  1688,21,319.191
  1963,24,359.216
  2118,22,308.772
  2802,22,315.716
  2809,22,314.728
  2997,19,270.719
  3016,20,284.746
  3261,21,294.745
  3299,25,360.772


List the available descriptors
------------------------------

use the `--list` option to get a list of the available descriptors::

  % ./rdprops --list | wc -l
       124

That's rather a lot, so I'll elide some of them::

  % ./rdprops --list
  _chargeDescriptors
  BalabanJ
  BertzCT
  cansmiles
  chargeDescriptorVersion
  Chi0
  Chi0n
  Chi0v
     ...
  ExactMolWt
  FractionCSP3
  HallKierAlpha
  HeavyAtomCount
  HeavyAtomMolWt
  id
  input_format
  input_mol
  input_record
     ...
  mol
  MolLogP
  MolMR
  MolWt
  MolWt_version
  nci_iupac_name
  nci_names
    ...
  TPSA
    ...
  VSA_EState8
  VSA_EState9

A future version will include a way to get a description of each
descriptor.

What's also missing is a naming convention or some other mechanism to
describe if it makes sense to print a descriptor as text. For example,
the 'mol' property is the RDKit molecule object for the input
structure, after de-salting. It doesn't make sense to display the
opaque text representation of a molecule object ::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,mol' | head -5 
  id	mol
  1688	<rdkit.Chem.rdchem.Mol object at 0x105c44910>
  1963	<rdkit.Chem.rdchem.Mol object at 0x105c44980>
  2118	<rdkit.Chem.rdchem.Mol object at 0x105c449f0>
  2802	<rdkit.Chem.rdchem.Mol object at 0x105c44a60>

Similarly, the _chargeDescriptors property is another internal
property that shouldn't really be exposed. (I'll use this as an
example of how the quoting rules work for the 'excel' dialect.)::

  % ./rdprops tests/benzodiazepine.smi --columns 'id,_chargeDescriptors' --dialect excel | head -3
  id,_chargeDescriptors
  1688,"ChargeDescriptor(minCharge=-0.31319991842931816, maxCharge=0.24791727974294836)"
  1963,"ChargeDescriptor(minCharge=-0.38834256479943147, maxCharge=0.16298797813009208)"

I may move to the convention that a leading '_', and perhaps also a
leading lowercase character, indicate an internal variable. Or I may
have some way to mark certain descriptors as only being for internal
use. Then again, I like how IPython supports adapters to, for example,
show inline images for a molecule in a table. Perhaps I'll do that.

Specify the format
------------------

Propbox uses the filename extension to determine the file format, and
to see if the file is gzip compressed. The following case-insensitive
extensions are supported:

  .smi, .ism, .isosmi - SMILES
  .smi.gz, .ism.gz, .isosmi.gz - gzip compressed SMILES

  .sdf, .sd, .mdl - SD file
  .sdf.gz, .sd.gz, .mdl.gz - gzip compressed SD file

If propbox does not recognize the file format extension, or if the
input comes from stdin, then it will assume the input is an
uncompressed file format.

You can specify the format directly using `--format` instead of
depending on propbox's auto-detection code. For example, since rdprops
expects a SMILES file from stdin, pipeing in an SD file will cause a
problem::


  % ./rdprops < tests/CHEMBL11862.sdf
  [01:33:10] SMILES Parse Error: syntax error for input: CHEMBL11862
  [01:33:10] SMILES Parse Error: syntax error for input: SciTegic11101117232D
  Traceback (most recent call last):
    File "rdprops", line 9, in <module>
      rdprops.main()
    File "/Users/dalke/cvses/propbox/propbox/rdprops.py", line 174, in main
      ids_and_mols = list(batch_reader)
    File "/Users/dalke/cvses/propbox/propbox/rdkit_toolkit.py", line 183, in _read_smiles
      raise ValueError("Line %d is empty" % (lineno,))
  ValueError: Line 3 is empty
  

I'll instead tell it the input is an uncompressed SD file::

  % ./rdprops --format sdf < tests/CHEMBL11862.sdf
  id	smiles	MolWt
  CHEMBL11862	Oc1cc2c(cc1O)CNCC2	165.192

The supported formats are 'smi', 'smi.gz', 'sdf', and 'sdf.gz', with
the expected meanings.


Use an SD tag as a title
------------------------






Reader arguments
----------------

The RDKit SMILES and SDF readers support a few options:

  SMILES:
    has_header - Is the first line of the SMILES file a
       header line? (boolean, with default of False)
       
    delimiter - Specify how to parse the fields of a
       SMILES files? (One of 'space'/" ", 'tab'/"\t",
       'whitespace', or 'to-eol', with default of 'to-eol')

    sanitize - Should the newly parsed molecule be
       sanitized? (boolean, with default of True)


  SDF:
    strictParsing - Use strict parsing rules? (boolean,
       with default of True)
    
    removeHs - Should hydrogens be removed from the
       molecule? (boolean, with default of True)
    
    sanitize - same as in SMILES


The "delimiter" option is a bit unusual. Different people have a
different interpretation of what a SMILES file means. The orignal
Daylight definition was that the file contains a SMILES, followed by a
whitespace, and the rest of the line is the identifier.

In propbox (and in chemfp) this is called the 'to-eol' delimiter, and
is the default.

Other people think of a SMILES file as a space, tab, or whitespace
separated file, where the first column is the SMILES, the second
column is the identifier, and additional columns are ignored.  In
propbox these are refered to as the "space", "tab", and "whitespace"
delimiter styles, respectively. ("Whitespace" means that each word is
treated as its own field.)

You can specify these reader arguments on the command line. For
example, in "tests/drugs.smi" is a file I got from Daylight many years
ago::

  % cat tests/drugs.smi 
  N12CCC36C1CC(C(C2)=CCOC4CC5=O)C4C3N5c7ccccc76 Strychnine
  c1ccccc1C(=O)OC2CC(N3C)CCC3C2C(=O)OC cocaine
  COc1cc2c(ccnc2cc1)C(O)C4CC(CC3)C(C=C)CN34 quinine
  OC(=O)C1CN(C)C2CC3=CCNc(ccc4)c3c4C2=C1 lyseric acid
  CCN(CC)C(=O)C1CN(C)C2CC3=CNc(ccc4)c3c4C2=C1 LSD
  C123C5C(O)C=CC2C(N(C)CC1)Cc(ccc4O)c3c4O5 morphine
  C123C5C(OC(=O)C)C=CC2C(N(C)CC1)Cc(ccc4OC(=O)C)c3c4O5 heroin
  c1ncccc1C1CCCN1C nicotine
  CN1C(=O)N(C)C(=O)C(N(C)C=N2)=C12 caffeine
  C1C(C)=C(C=CC(C)=CC=CC(C)=CCO)C(C)(C)C1 vitamin a

Two of the identifiers, "lyseric acid" and "vitamin a", contain a
space in them. The default delimiter style is 'to-eol', which is why
the following show the full names::

  % ./rdprops --columns 'id,MolWt' tests/drugs.smi
  id	MolWt
  Strychnine	334.419
  cocaine	303.358
  quinine	324.424
  lyseric acid	282.343
  LSD	323.44
  morphine	285.343
  heroin	369.417
  nicotine	162.236
  caffeine	194.194
  vitamin a	272.432

To specify the 'whitespace' delimiter style, use the `-R` parameter,
which takes a NAME=VALUE setting::

  % ./rdprops --columns 'id,MolWt' -R delimiter=whitespace tests/drugs.smi 
  id	MolWt
  Strychnine	334.419
  cocaine	303.358
  quinine	324.424
  lyseric	282.343
  LSD	323.44
  morphine	285.343
  heroin	369.417
  nicotine	162.236
  caffeine	194.194
  vitamin	272.432
  

The boolean reader args interpret the strings "True", "true", or "1" a
a true value, and "False", "false", or "0" for a false value. For
example, the following will skip the first line of drugs.smi on the
assumption that it's a header line::

  % ./rdprops --columns 'id,MolWt' -R has_header=true tests/drugs.smi
  id	MolWt
  cocaine	303.358
  quinine	324.424
  lyseric acid	282.343
  LSD	323.44
  morphine	285.343
  heroin	369.417
  nicotine	162.236
  caffeine	194.194
  vitamin a	272.432
  

Batch size
----------

The 'nci_iupac_name' uses the NCI web service API to turn a SMILES
into an IUPAC name. This is mostly a proof-of-concept API, and it's
rather slow since I make a request for each record. (Does the NCI
resolver have a batch mode API?) Still, let's give it a whirl::

  % ./rdprops --columns 'id,nci_iupac_name' tests/drugs.smi
  id	nci_iupac_name
  Strychnine	*
  cocaine	methyl 3-(benzoyloxy)-8-methyl-8-azabicyclo[3.2.1]octane-2-carboxylate
  quinine	(5-ethenyl-1-azabicyclo[2.2.2]octan-7-yl)-(6-methoxyquinolin-4-yl)methanol
  lyseric acid	*
  LSD	*
  morphine	*
  heroin	*
  nicotine	3-(1-methylpyrrolidin-2-yl)pyridine
  caffeine	1,3,7-trimethylpurine-2,6-dione
  vitamin a	*

This took about 3 seconds, but you'll notice that there was no output
until everything was ready. This is because propbox by default
processes the records in batches of 1,000 records. It will compute the
properties for the first 1,000 structures, then display the result,
then compute the properties for the second 1,000 structures, then
display those results, etc.

I can ask it to process one record at a time using the `--batch-size`
parameter::

  % ./rdprops --columns 'id,nci_iupac_name' --batch-size 1 tests/drugs.smi 
  id	nci_iupac_name
  Strychnine	*
  cocaine	methyl 3-(benzoyloxy)-8-methyl-8-azabicyclo[3.2.1]octane-2-carboxylate
  quinine	(5-ethenyl-1-azabicyclo[2.2.2]octan-7-yl)-(6-methoxyquinolin-4-yl)methanol
  lyseric acid	*
  LSD	*
  morphine	*
  heroin	*
  nicotine	3-(1-methylpyrrolidin-2-yl)pyridine
  caffeine	1,3,7-trimethylpurine-2,6-dione
  vitamin a	*


(Propbox uses a '*' for records which had a problem. There is currently
no way to use another symbol.)

In the NCI case there is no timing difference between a batch size of
1 and of 1,000 records because the propbox NCI client makes one
request at a time. Batch mode exists because in some cases it's faster
to process N molecules at once than to process each one
individually. Eg, in the future propbox might be able to send all of
the queries to the server in a single request, which would save a lot
of network overhead.

Use `--batch-size all` to process all of the structures in a single
batch.




Andrew Dalke / Dalke Scientific / dalke@dalkescientific.com

